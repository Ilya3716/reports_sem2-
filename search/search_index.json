{"config":{"indexing":"full","lang":["ru"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"welcome to my materials","title":"Home"},{"location":"lab1/","text":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161 \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b: \u041d\u0430\u0443\u0447\u0438\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 2.1-2.3 \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u0432 \u0442\u0435\u043a\u0441\u0442\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u0443\u044e \u0442\u0435\u043c\u0443. \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043b\u044e\u0431\u043e\u043c \u0438\u0437 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432: a. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0430\u043f\u043a\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. b. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0442\u043a\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. c. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 9 \u0411\u0430\u043b\u043b\u043e\u0432: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI. \u041e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f: a. \u0422\u0430\u0431\u043b\u0438\u0446\u044b, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ORM SQLAlchemy \u0438\u043b\u0438 SQLModel \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0411\u0414 PostgreSQL. b. API, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 CRUD-\u044b. \u0422\u0430\u043c \u0433\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 (\u0441\u0432\u044f\u0437\u0438 many-to-many \u0438 one-to-many). c. \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Alembic. d. \u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0432 API-\u043c\u0435\u0442\u043e\u0434\u0430\u0445. e. \u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043d\u0443\u044e \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u0434\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0437\u0430 \u0440\u0430\u0437\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438. f. (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0447\u0430\u0441\u0442\u044f\u043c \u043a\u043e\u0434\u0430. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0411\u0430\u043b\u043b\u043e\u0432 (\u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443): \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f: a. \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e b. \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 c. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443 d. \u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 e. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0410\u041f\u0418-\u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043c\u0435\u043d\u0435 \u043f\u0430\u0440\u043e\u043b\u044f \u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 https://github.com/Ilya3716/ITMO_ICT_WebDevelopment_tools_2023-2024/tree/lab-1/students/k33402/Samarov_Ilya \u0425\u043e\u0434 \u0420\u0430\u0431\u043e\u0442\u044b: \u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0431\u044b\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439: endpoints(auth_endpoints, user_endpoints, location_endpoints, travel_endpoints) - \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 models - \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b\u044b \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a, main, auth, database \u041d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u0448\u0430\u0433\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445: main.py from fastapi import FastAPI import uvicorn from database import init_db from location_endpoints import location_router from travel_endpoints import travel_router from auth_endpoints import auth_router from user_endpoints import user_router app = FastAPI() app.include_router(location_router, prefix=\"/api/locations\", tags=[\"locations\"]) app.include_router(travel_router, prefix=\"/api/travels\", tags=[\"travels\"]) app.include_router(auth_router, prefix=\"/api\", tags=[\"auth\"]) app.include_router(user_router, prefix=\"/api/users\", tags=[\"users\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True) database.py from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() engine = create_engine(os.getenv('DB_URL'), echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session \u0414\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f jwt \u0442\u043e\u043a\u0435\u043d\u044b auth.py import datetime from fastapi import Security, HTTPException, Depends from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from passlib.context import CryptContext import jwt from starlette import status from database import get_session from models import User from sqlmodel import select security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret_key = 'supersecret' def get_password_hash(password): return pwd_context.hash(password) def verify_password(password, hashed_password): return pwd_context.verify(password, hashed_password) def encode_token(user_id): payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, secret_key, algorithm='HS256') def decode_token(token): try: payload = jwt.decode(token, secret_key, algorithms=['HS256']) return payload['sub'] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail='Expired signature') except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail='Invalid token') def auth_wrapper(auth: HTTPAuthorizationCredentials = Security(security)): return decode_token(auth.credentials) def get_current_user(auth: HTTPAuthorizationCredentials = Security(security), session=Depends(get_session)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials' ) username = decode_token(auth.credentials) if username is None: raise credentials_exception user = session.exec(select(User).where(User.username == username)).first() if user is None: raise credentials_exception return user \u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 models.py import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class TypeOfTravel(Enum): elite_hotel = \"elite_hotel\" pretty_simple_hotel = \"pretty_simple_hotel\" apartments = \"apartments\" tents = \"tents\" class PlaceRating(Enum): five = '5' four = '4' three = '3' two = '2' one = '1' zero = '0' class PlaceBase(SQLModel): name: str description: str place_rating: PlaceRating area_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") class PlaceShow(PlaceBase): area: Optional[\"Area\"] = None class Place(PlaceBase, table=True): id: int = Field(default=None, primary_key=True) area: Optional[\"Area\"] = Relationship(back_populates=\"places\") class AreaBase(SQLModel): name: str description: str class AreaShow(AreaBase): places: Optional[List[\"Place\"]] = None class Area(AreaBase, table=True): id: int = Field(default=None, primary_key=True) places: Optional[List[\"Place\"]] = Relationship(back_populates=\"area\", sa_relationship_kwargs={ \"cascade\": \"all, delete\", } ) from_location: Optional[\"Travel\"] = Relationship(back_populates=\"location_from\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_from_id]\"), ) to_location: Optional[\"Travel\"] = Relationship(back_populates=\"location_to\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_from_id]\"), ) class TravelTogetherBase(SQLModel): comment: str travel_id: Optional[int] = Field(default=None, foreign_key=\"travel.id\") traveller_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class TravelTogetherShow(TravelTogetherBase): travels: Optional[\"Travel\"] = None travellers: Optional[\"User\"] = None class TravelTogether(TravelTogetherBase, table=True): id: int = Field(default=None, primary_key=True) travels: Optional[\"Travel\"] = Relationship(back_populates=\"traveltogethers\") travellers: Optional[\"User\"] = Relationship(back_populates=\"traveltogethers\") class TravelBase(SQLModel): location_from_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") location_to_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") path_description: str date_start: datetime.datetime date_end: datetime.datetime type_of_travel: TypeOfTravel class TravelShow(TravelBase): location_from: Optional[\"Area\"] = None location_to: Optional[\"Area\"] = None class Travel(TravelBase, table=True): id: int = Field(default=None, primary_key=True) location_from: Optional[\"Area\"] = Relationship(back_populates=\"from_location\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_from_id]\"), ) location_to: Optional[\"Area\"] = Relationship(back_populates=\"to_location\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_to_id]\"), ) travellers: Optional[List[\"User\"]] = Relationship( back_populates=\"travels\", link_model=TravelTogether ) traveltogethers: Optional[List[\"TravelTogether\"]] = Relationship(back_populates=\"travels\") class UserBase(SQLModel): username: str password: str class UserShow(UserBase): travels: Optional[List[\"Travel\"]] = None traveltogethers: Optional[List[\"TravelTogether\"]] = None class User(UserBase, table=True): id: int = Field(default=None, primary_key=True) travels: Optional[List[\"Travel\"]] = Relationship( back_populates=\"travellers\", link_model=TravelTogether ) traveltogethers: Optional[List[\"TravelTogether\"]] = Relationship(back_populates=\"travellers\") class ChangePassword(SQLModel): old_password: str new_password: str \u0414\u0430\u043b\u0435\u0435 \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u044d\u043d\u0434\u043f\u043e\u0439\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API auth_endpoints @auth_router.post('/registration', status_code=201, description='Register new user') def register(user: UserBase, session=Depends(get_session)): users = session.exec(select(User)).all() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = get_password_hash(user.password) user = User(username=user.username, password=hashed_pwd) session.add(user) session.commit() return {\"status\": 201, \"message\": \"Created\"} @auth_router.post('/login') def login(user: UserBase, session=Depends(get_session)): user_found = session.exec(select(User).where(User.username == user.username)).first() if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = encode_token(user_found.username) return {'token': token} @auth_router.get('/me', response_model=UserShow) def get_current_user(user: User = Depends(get_current_user)) -> User: return user @auth_router.patch(\"/me/change-password\") def user_pwd(user_pwd: ChangePassword, session=Depends(get_session), current=Depends(get_current_user)): found_user = session.get(User, current.id) if not found_user: raise HTTPException(status_code=404, detail=\"User not found\") verified = verify_password(user_pwd.old_password, found_user.password) if not verified: raise HTTPException(status_code=400, detail=\"Invalid old password\") hashed_pwd = get_password_hash(user_pwd.new_password) found_user.password = hashed_pwd session.add(found_user) session.commit() session.refresh(found_user) return {\"status\": 200, \"message\": \"password changed successfully\"} user_endpoints @user_router.get(\"/users/list\") def user_list(session=Depends(get_session)) -> list[User]: users = session.exec(select(User)).all() user_models = [user.model_dump(exclude={'password'}) for user in users] return user_models @user_router.get(\"/users/{user_id}\") def user_get(user_id: int, session=Depends(get_session)) -> UserShow: user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") return user @user_router.delete(\"/users/delete/{travel_id}\") def traveltogether_delete(user_id: int, session=Depends(get_session)): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") session.delete(user) session.commit() return {\"ok\": True} location_endpoints @location_router.post(\"/area-create\") def area_create(area: AreaBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Area}): area = Area.model_validate(area) session.add(area) session.commit() session.refresh(area) return {\"status\": 200, \"data\": area} @location_router.get(\"/list-areas\") def areas_list(session=Depends(get_session)) -> list[Area]: return session.query(Area).all() @location_router.get(\"/area/{area_id}\", response_model=AreaShow) def area_get(area_id: int, session=Depends(get_session)): obj = session.get(Area, area_id) if obj is None: raise HTTPException(status_code=404, detail=\"subarea not found\") return obj @location_router.patch(\"/area/update/{area_id}\") def area_update(area_id: int, area: AreaBase, session=Depends(get_session)) -> Area: db_area = session.get(Area, area_id) if not db_area: raise HTTPException(status_code=404, detail=\"area not found\") area_data = area.model_dump(exclude_unset=True) for key, value in area_data.items(): setattr(db_area, key, value) session.add(db_area) session.commit() session.refresh(db_area) return db_area @location_router.delete(\"/area/delete/{area_id}\") def area_delete(area_id: int, session=Depends(get_session)): area = session.get(Area, area_id) if not area: raise HTTPException(status_code=404, detail=\"area not found\") session.delete(area) session.commit() return {\"ok\": True} @location_router.post(\"/place-create\") def place_create(place: PlaceBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Place}): place = Place.model_validate(place) session.add(place) session.commit() session.refresh(place) return {\"status\": 200, \"data\": place} @location_router.get(\"/list-places-in-area/{area_id}\") def places_list(area_id: int, session=Depends(get_session)) -> list[Place]: return session.query(Place).filter(Place.area_id == area_id).all() @location_router.get(\"/place/{place_id}\", response_model=PlaceShow) def place_get(place_id: int, session=Depends(get_session)): obj = session.get(Place, place_id) if obj is None: raise HTTPException(status_code=404, detail=\"subplace not found\") return obj @location_router.patch(\"/place/update/{place_id}\") def place_update(place_id: int, place: PlaceBase, session=Depends(get_session)) -> Place: db_place = session.get(place, place_id) if not db_place: raise HTTPException(status_code=404, detail=\"place not found\") place_data = place.model_dump(exclude_unset=True) for key, value in place_data.items(): setattr(db_place, key, value) session.add(db_place) session.commit() session.refresh(db_place) return db_place @location_router.delete(\"/place/delete/{place_id}\") def place_delete(place_id: int, session=Depends(get_session)): place = session.get(Place, place_id) if not place: raise HTTPException(status_code=404, detail=\"place not found\") session.delete(place) session.commit() return {\"ok\": True} travel_endpoints @travel_router.post(\"/travel-create\") def travel_create(travel: TravelBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Travel}): travel = Travel.model_validate(travel) session.add(travel) session.commit() session.refresh(travel) return {\"status\": 200, \"data\": travel} @travel_router.get(\"/list-travels\") def travels_list(session=Depends(get_session)) -> list[Travel]: return session.query(Travel).all() @travel_router.get(\"/travel/{travel_id}\", response_model=TravelShow) def travel_get(travel_id: int, session=Depends(get_session)): obj = session.get(Travel, travel_id) if obj is None: raise HTTPException(status_code=404, detail=\"subtravel not found\") return obj @travel_router.patch(\"/travel/update/{travel_id}\") def travel_update(travel_id: int, travel: TravelBase, session=Depends(get_session)) -> Travel: db_travel = session.get(Travel, travel_id) if not db_travel: raise HTTPException(status_code=404, detail=\"travel not found\") travel_data = travel.model_dump(exclude_unset=True) for key, value in travel_data.items(): setattr(db_travel, key, value) session.add(db_travel) session.commit() session.refresh(db_travel) return db_travel @travel_router.delete(\"/travel/delete/{travel_id}\") def travel_delete(travel_id: int, session=Depends(get_session)): travel = session.get(Travel, travel_id) if not travel: raise HTTPException(status_code=404, detail=\"travel not found\") session.delete(travel) session.commit() return {\"ok\": True} @travel_router.post(\"/travel-together-create\") def traveltogether_create(travel: TravelTogetherBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": TravelTogether}): travel = TravelTogether.model_validate(travel) session.add(travel) session.commit() session.refresh(travel) return {\"status\": 200, \"data\": travel} @travel_router.get(\"/list-traveltogethers\") def traveltogethers_list(session=Depends(get_session)) -> list[TravelTogether]: return session.query(TravelTogether).all() @travel_router.get(\"/traveltogether/{travel_id}\", response_model=TravelTogetherShow) def traveltogether_get(travel_id: int, session=Depends(get_session)): obj = session.get(TravelTogether, travel_id) if obj is None: raise HTTPException(status_code=404, detail=\"travel not found\") return obj @travel_router.patch(\"/traveltogether/update/{travel_id}\") def traveltogether_update(travel_id: int, travel: TravelTogetherBase, session=Depends(get_session)) -> TravelTogether: db_travel = session.get(TravelTogether, travel_id) if not db_travel: raise HTTPException(status_code=404, detail=\"travel not found\") travel_data = travel.model_dump(exclude_unset=True) for key, value in travel_data.items(): setattr(db_travel, key, value) session.add(db_travel) session.commit() session.refresh(db_travel) return db_travel @travel_router.delete(\"/traveltogether/delete/{travel_id}\") def traveltogether_delete(travel_id: int, session=Depends(get_session)): travel = session.get(TravelTogether, travel_id) if not travel: raise HTTPException(status_code=404, detail=\"travel not found\") session.delete(travel) session.commit() return {\"ok\": True} \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 swagger: Locations Travels Auth Users \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 PGAdmin \u0422\u0430\u043a\u0436\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 alembic \u0412\u044b\u0432\u043e\u0434 \u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e API \u0441 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0438 CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435 FastAPI","title":"lab1"},{"location":"lab1/#no1","text":"","title":"\u041e\u0442\u0447\u0435\u0442 \u043f\u043e \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u21161"},{"location":"lab1/#_1","text":"\u041d\u0430\u0443\u0447\u0438\u0442\u0441\u044f \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u043f\u043e\u043b\u043d\u043e\u0446\u0435\u043d\u043d\u043e\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0430 FastAPI \u0441 \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0445 \u0441\u0440\u0435\u0434\u0441\u0442\u0432 \u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a.","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b:"},{"location":"lab1/#_2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab1/#_3","text":"\u0412\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 2.1-2.3 \u0418\u0445 \u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043f\u0440\u0438\u043c\u0435\u0440\u0435, \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u043e\u043c \u0432 \u0442\u0435\u043a\u0441\u0442\u0430\u0445 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0438\u043b\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044f \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u0443\u044e \u0442\u0435\u043c\u0443. \u041f\u0440\u0430\u043a\u0442\u0438\u043a\u0438 \u043c\u043e\u0436\u043d\u043e \u043f\u0440\u0435\u0434\u043e\u0441\u0442\u0430\u0432\u0438\u0442\u044c \u0432 \u043b\u044e\u0431\u043e\u043c \u0438\u0437 \u043d\u0438\u0436\u0435 \u043f\u0440\u0438\u0432\u0435\u0434\u0435\u043d\u043d\u044b\u0445 \u0432\u0430\u0440\u0438\u0430\u043d\u0442\u043e\u0432: a. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u043f\u0430\u043f\u043a\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. b. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u0430\u044f \u0432\u0435\u0442\u043a\u0430 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. c. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0430 - \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u043a\u043e\u043c\u043c\u0438\u0442 \u0432 \u0440\u0435\u043f\u043e\u0437\u0438\u0442\u043e\u0440\u0438\u0438. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 9 \u0411\u0430\u043b\u043b\u043e\u0432: \u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0430\u043d\u0438\u0438 \u0432\u044b\u0431\u0440\u0430\u043d\u043d\u043e\u0439 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0438\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0438\u0439 \u0438\u0437 \u043f\u0440\u0430\u043a\u0442\u0438\u043a \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u043e\u0435 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u043d\u0430 FastAPI. \u041e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u0432\u043a\u043b\u044e\u0447\u0430\u0442\u044c \u0432 \u0441\u0435\u0431\u044f: a. \u0422\u0430\u0431\u043b\u0438\u0446\u044b, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u043d\u044b\u0435 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e ORM SQLAlchemy \u0438\u043b\u0438 SQLModel \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u0411\u0414 PostgreSQL. b. API, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 CRUD-\u044b. \u0422\u0430\u043c \u0433\u0434\u0435 \u044d\u0442\u043e \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e, \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c GET-\u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u044e\u0449\u0438\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 \u0441 \u0432\u043b\u043e\u0436\u0435\u043d\u043d\u044b\u043c\u0438 \u043e\u0431\u044a\u0435\u043a\u0442\u0430\u043c\u0438 (\u0441\u0432\u044f\u0437\u0438 many-to-many \u0438 one-to-many). c. \u041d\u0430\u0441\u0442\u0440\u043e\u0435\u043d\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443 \u043c\u0438\u0433\u0440\u0430\u0446\u0438\u0439 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 Alembic. d. \u0410\u043d\u043d\u043e\u0442\u0430\u0446\u0438\u044e \u0442\u0438\u043f\u043e\u0432 \u0432 \u043f\u0435\u0440\u0435\u0434\u0430\u0432\u0430\u0435\u043c\u044b\u0445 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u043c\u044b\u0445 \u0437\u043d\u0430\u0447\u0435\u043d\u0438\u044f\u0445 \u0432 API-\u043c\u0435\u0442\u043e\u0434\u0430\u0445. e. \u041e\u0444\u043e\u0440\u043c\u043b\u0435\u043d\u043d\u0443\u044e \u0444\u0430\u0439\u043b\u043e\u0432\u0443\u044e \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u0441 \u0440\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u0438\u0435\u043c \u043a\u043e\u0434\u0430, \u043e\u0442\u0432\u0435\u0447\u0430\u044e\u0449\u0435\u0433\u043e \u0437\u0430 \u0440\u0430\u0437\u043d\u0443\u044e \u0431\u0438\u0437\u043d\u0435\u0441-\u043b\u043e\u0433\u0438\u043a\u0443 \u0438 \u043f\u0440\u0435\u0434\u043c\u0435\u0442\u043d\u0443\u044e \u043e\u0431\u043b\u0430\u0441\u0442\u044c, \u043d\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0435 \u0444\u0430\u0439\u043b\u044b \u0438 \u043f\u0430\u043f\u043a\u0438. f. (\u043e\u043f\u0446\u0438\u043e\u043d\u0430\u043b\u044c\u043d\u043e) \u041a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0438 \u043a \u0441\u043b\u043e\u0436\u043d\u044b\u043c \u0447\u0430\u0441\u0442\u044f\u043c \u043a\u043e\u0434\u0430. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043d\u0430 15 \u0411\u0430\u043b\u043b\u043e\u0432 (\u043c\u043e\u0436\u043d\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u044b\u0432\u0430\u0442\u044c \u0441\u0440\u0430\u0437\u0443): \u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u0440\u0430\u0437\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u043c\u043e\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0438. \u0424\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b \u0432\u043a\u043b\u044e\u0447\u0430\u0435\u0442 \u0432 \u0441\u0435\u0431\u044f: a. \u0410\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u044e \u0438 \u0440\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044e b. \u0413\u0435\u043d\u0435\u0440\u0430\u0446\u0438\u044e JWT-\u0442\u043e\u043a\u0435\u043d\u043e\u0432 c. \u0410\u0443\u0442\u0435\u043d\u0442\u0438\u0444\u0438\u043a\u0430\u0446\u0438\u044e \u043f\u043e JWT-\u0442\u043e\u043a\u0435\u043d\u0443 d. \u0425\u044d\u0448\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043f\u0430\u0440\u043e\u043b\u0435\u0439 e. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0410\u041f\u0418-\u043c\u0435\u0442\u043e\u0434\u044b \u0434\u043b\u044f \u043f\u043e\u043b\u0443\u0447\u0435\u043d\u0438\u044f \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u0438 \u043e \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435, \u0441\u043f\u0438\u0441\u043a\u0430 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439 \u0438 \u0441\u043c\u0435\u043d\u0435 \u043f\u0430\u0440\u043e\u043b\u044f","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f:"},{"location":"lab1/#_4","text":"https://github.com/Ilya3716/ITMO_ICT_WebDevelopment_tools_2023-2024/tree/lab-1/students/k33402/Samarov_Ilya","title":"\u0421\u0441\u044b\u043b\u043a\u0430 \u043d\u0430 \u043f\u0440\u0430\u043a\u0442\u0438\u043a\u0438"},{"location":"lab1/#_5","text":"\u0414\u043b\u044f \u043d\u0430\u0447\u0430\u043b\u0430 \u043e\u043f\u0440\u0435\u0434\u0435\u043b\u0438\u043c \u0441\u0442\u0440\u0443\u043a\u0442\u0443\u0440\u0443 \u043f\u0440\u043e\u0435\u043a\u0442\u0430, \u0431\u044b\u043b\u0438 \u0432\u044b\u0434\u0435\u043b\u0435\u043d\u044b \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u0441\u0443\u0449\u043d\u043e\u0441\u0442\u0435\u0439: endpoints(auth_endpoints, user_endpoints, location_endpoints, travel_endpoints) - \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 models - \u0434\u043b\u044f \u0445\u0440\u0430\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0435\u043a\u0442\u0430 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u044b\u0439 \u0444\u0430\u0439\u043b\u044b \u0442\u0430\u043a\u0438\u0435 \u043a\u0430\u043a, main, auth, database \u041d\u0430 \u043f\u0435\u0440\u0432\u043e\u043c \u0448\u0430\u0433\u0435 \u0438\u043d\u0438\u0446\u0438\u0430\u043b\u0438\u0437\u0438\u0440\u0443\u0435\u043c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0438 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u043c \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445: main.py from fastapi import FastAPI import uvicorn from database import init_db from location_endpoints import location_router from travel_endpoints import travel_router from auth_endpoints import auth_router from user_endpoints import user_router app = FastAPI() app.include_router(location_router, prefix=\"/api/locations\", tags=[\"locations\"]) app.include_router(travel_router, prefix=\"/api/travels\", tags=[\"travels\"]) app.include_router(auth_router, prefix=\"/api\", tags=[\"auth\"]) app.include_router(user_router, prefix=\"/api/users\", tags=[\"users\"]) @app.on_event(\"startup\") def on_startup(): init_db() if __name__ == '__main__': uvicorn.run('main:app', host=\"localhost\", port=8000, reload=True) database.py from sqlmodel import SQLModel, Session, create_engine import os from dotenv import load_dotenv load_dotenv() engine = create_engine(os.getenv('DB_URL'), echo=True) def init_db(): SQLModel.metadata.create_all(engine) def get_session(): with Session(engine) as session: yield session \u0414\u043b\u044f \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0438 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0442\u0441\u044f jwt \u0442\u043e\u043a\u0435\u043d\u044b auth.py import datetime from fastapi import Security, HTTPException, Depends from fastapi.security import HTTPBearer, HTTPAuthorizationCredentials from passlib.context import CryptContext import jwt from starlette import status from database import get_session from models import User from sqlmodel import select security = HTTPBearer() pwd_context = CryptContext(schemes=['bcrypt']) secret_key = 'supersecret' def get_password_hash(password): return pwd_context.hash(password) def verify_password(password, hashed_password): return pwd_context.verify(password, hashed_password) def encode_token(user_id): payload = { 'exp': datetime.datetime.utcnow() + datetime.timedelta(hours=8), 'iat': datetime.datetime.utcnow(), 'sub': user_id } return jwt.encode(payload, secret_key, algorithm='HS256') def decode_token(token): try: payload = jwt.decode(token, secret_key, algorithms=['HS256']) return payload['sub'] except jwt.ExpiredSignatureError: raise HTTPException(status_code=401, detail='Expired signature') except jwt.InvalidTokenError: raise HTTPException(status_code=401, detail='Invalid token') def auth_wrapper(auth: HTTPAuthorizationCredentials = Security(security)): return decode_token(auth.credentials) def get_current_user(auth: HTTPAuthorizationCredentials = Security(security), session=Depends(get_session)): credentials_exception = HTTPException( status_code=status.HTTP_401_UNAUTHORIZED, detail='Could not validate credentials' ) username = decode_token(auth.credentials) if username is None: raise credentials_exception user = session.exec(select(User).where(User.username == username)).first() if user is None: raise credentials_exception return user \u0411\u044b\u043b\u0438 \u0441\u043e\u0437\u0434\u0430\u043d\u044b \u0432\u0441\u0435 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u044b\u0435 \u043c\u043e\u0434\u0435\u043b\u0438 models.py import datetime from pydantic import BaseModel from enum import Enum from typing import Optional, List from sqlmodel import SQLModel, Field, Relationship class TypeOfTravel(Enum): elite_hotel = \"elite_hotel\" pretty_simple_hotel = \"pretty_simple_hotel\" apartments = \"apartments\" tents = \"tents\" class PlaceRating(Enum): five = '5' four = '4' three = '3' two = '2' one = '1' zero = '0' class PlaceBase(SQLModel): name: str description: str place_rating: PlaceRating area_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") class PlaceShow(PlaceBase): area: Optional[\"Area\"] = None class Place(PlaceBase, table=True): id: int = Field(default=None, primary_key=True) area: Optional[\"Area\"] = Relationship(back_populates=\"places\") class AreaBase(SQLModel): name: str description: str class AreaShow(AreaBase): places: Optional[List[\"Place\"]] = None class Area(AreaBase, table=True): id: int = Field(default=None, primary_key=True) places: Optional[List[\"Place\"]] = Relationship(back_populates=\"area\", sa_relationship_kwargs={ \"cascade\": \"all, delete\", } ) from_location: Optional[\"Travel\"] = Relationship(back_populates=\"location_from\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_from_id]\"), ) to_location: Optional[\"Travel\"] = Relationship(back_populates=\"location_to\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_from_id]\"), ) class TravelTogetherBase(SQLModel): comment: str travel_id: Optional[int] = Field(default=None, foreign_key=\"travel.id\") traveller_id: Optional[int] = Field(default=None, foreign_key=\"user.id\") class TravelTogetherShow(TravelTogetherBase): travels: Optional[\"Travel\"] = None travellers: Optional[\"User\"] = None class TravelTogether(TravelTogetherBase, table=True): id: int = Field(default=None, primary_key=True) travels: Optional[\"Travel\"] = Relationship(back_populates=\"traveltogethers\") travellers: Optional[\"User\"] = Relationship(back_populates=\"traveltogethers\") class TravelBase(SQLModel): location_from_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") location_to_id: Optional[int] = Field(default=None, foreign_key=\"area.id\") path_description: str date_start: datetime.datetime date_end: datetime.datetime type_of_travel: TypeOfTravel class TravelShow(TravelBase): location_from: Optional[\"Area\"] = None location_to: Optional[\"Area\"] = None class Travel(TravelBase, table=True): id: int = Field(default=None, primary_key=True) location_from: Optional[\"Area\"] = Relationship(back_populates=\"from_location\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_from_id]\"), ) location_to: Optional[\"Area\"] = Relationship(back_populates=\"to_location\", sa_relationship_kwargs= dict(foreign_keys=\"[Travel.location_to_id]\"), ) travellers: Optional[List[\"User\"]] = Relationship( back_populates=\"travels\", link_model=TravelTogether ) traveltogethers: Optional[List[\"TravelTogether\"]] = Relationship(back_populates=\"travels\") class UserBase(SQLModel): username: str password: str class UserShow(UserBase): travels: Optional[List[\"Travel\"]] = None traveltogethers: Optional[List[\"TravelTogether\"]] = None class User(UserBase, table=True): id: int = Field(default=None, primary_key=True) travels: Optional[List[\"Travel\"]] = Relationship( back_populates=\"travellers\", link_model=TravelTogether ) traveltogethers: Optional[List[\"TravelTogether\"]] = Relationship(back_populates=\"travellers\") class ChangePassword(SQLModel): old_password: str new_password: str \u0414\u0430\u043b\u0435\u0435 \u0431\u044b\u043b\u0438 \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u043d\u044b \u044d\u043d\u0434\u043f\u043e\u0439\u043d\u0442\u044b \u0434\u043b\u044f \u0440\u0430\u0431\u043e\u0442\u044b \u0441 API auth_endpoints @auth_router.post('/registration', status_code=201, description='Register new user') def register(user: UserBase, session=Depends(get_session)): users = session.exec(select(User)).all() if any(x.username == user.username for x in users): raise HTTPException(status_code=400, detail='Username is taken') hashed_pwd = get_password_hash(user.password) user = User(username=user.username, password=hashed_pwd) session.add(user) session.commit() return {\"status\": 201, \"message\": \"Created\"} @auth_router.post('/login') def login(user: UserBase, session=Depends(get_session)): user_found = session.exec(select(User).where(User.username == user.username)).first() if not user_found: raise HTTPException(status_code=401, detail='Invalid username and/or password') verified = verify_password(user.password, user_found.password) if not verified: raise HTTPException(status_code=401, detail='Invalid username and/or password') token = encode_token(user_found.username) return {'token': token} @auth_router.get('/me', response_model=UserShow) def get_current_user(user: User = Depends(get_current_user)) -> User: return user @auth_router.patch(\"/me/change-password\") def user_pwd(user_pwd: ChangePassword, session=Depends(get_session), current=Depends(get_current_user)): found_user = session.get(User, current.id) if not found_user: raise HTTPException(status_code=404, detail=\"User not found\") verified = verify_password(user_pwd.old_password, found_user.password) if not verified: raise HTTPException(status_code=400, detail=\"Invalid old password\") hashed_pwd = get_password_hash(user_pwd.new_password) found_user.password = hashed_pwd session.add(found_user) session.commit() session.refresh(found_user) return {\"status\": 200, \"message\": \"password changed successfully\"} user_endpoints @user_router.get(\"/users/list\") def user_list(session=Depends(get_session)) -> list[User]: users = session.exec(select(User)).all() user_models = [user.model_dump(exclude={'password'}) for user in users] return user_models @user_router.get(\"/users/{user_id}\") def user_get(user_id: int, session=Depends(get_session)) -> UserShow: user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"User not found\") return user @user_router.delete(\"/users/delete/{travel_id}\") def traveltogether_delete(user_id: int, session=Depends(get_session)): user = session.get(User, user_id) if not user: raise HTTPException(status_code=404, detail=\"user not found\") session.delete(user) session.commit() return {\"ok\": True} location_endpoints @location_router.post(\"/area-create\") def area_create(area: AreaBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Area}): area = Area.model_validate(area) session.add(area) session.commit() session.refresh(area) return {\"status\": 200, \"data\": area} @location_router.get(\"/list-areas\") def areas_list(session=Depends(get_session)) -> list[Area]: return session.query(Area).all() @location_router.get(\"/area/{area_id}\", response_model=AreaShow) def area_get(area_id: int, session=Depends(get_session)): obj = session.get(Area, area_id) if obj is None: raise HTTPException(status_code=404, detail=\"subarea not found\") return obj @location_router.patch(\"/area/update/{area_id}\") def area_update(area_id: int, area: AreaBase, session=Depends(get_session)) -> Area: db_area = session.get(Area, area_id) if not db_area: raise HTTPException(status_code=404, detail=\"area not found\") area_data = area.model_dump(exclude_unset=True) for key, value in area_data.items(): setattr(db_area, key, value) session.add(db_area) session.commit() session.refresh(db_area) return db_area @location_router.delete(\"/area/delete/{area_id}\") def area_delete(area_id: int, session=Depends(get_session)): area = session.get(Area, area_id) if not area: raise HTTPException(status_code=404, detail=\"area not found\") session.delete(area) session.commit() return {\"ok\": True} @location_router.post(\"/place-create\") def place_create(place: PlaceBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Place}): place = Place.model_validate(place) session.add(place) session.commit() session.refresh(place) return {\"status\": 200, \"data\": place} @location_router.get(\"/list-places-in-area/{area_id}\") def places_list(area_id: int, session=Depends(get_session)) -> list[Place]: return session.query(Place).filter(Place.area_id == area_id).all() @location_router.get(\"/place/{place_id}\", response_model=PlaceShow) def place_get(place_id: int, session=Depends(get_session)): obj = session.get(Place, place_id) if obj is None: raise HTTPException(status_code=404, detail=\"subplace not found\") return obj @location_router.patch(\"/place/update/{place_id}\") def place_update(place_id: int, place: PlaceBase, session=Depends(get_session)) -> Place: db_place = session.get(place, place_id) if not db_place: raise HTTPException(status_code=404, detail=\"place not found\") place_data = place.model_dump(exclude_unset=True) for key, value in place_data.items(): setattr(db_place, key, value) session.add(db_place) session.commit() session.refresh(db_place) return db_place @location_router.delete(\"/place/delete/{place_id}\") def place_delete(place_id: int, session=Depends(get_session)): place = session.get(Place, place_id) if not place: raise HTTPException(status_code=404, detail=\"place not found\") session.delete(place) session.commit() return {\"ok\": True} travel_endpoints @travel_router.post(\"/travel-create\") def travel_create(travel: TravelBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": Travel}): travel = Travel.model_validate(travel) session.add(travel) session.commit() session.refresh(travel) return {\"status\": 200, \"data\": travel} @travel_router.get(\"/list-travels\") def travels_list(session=Depends(get_session)) -> list[Travel]: return session.query(Travel).all() @travel_router.get(\"/travel/{travel_id}\", response_model=TravelShow) def travel_get(travel_id: int, session=Depends(get_session)): obj = session.get(Travel, travel_id) if obj is None: raise HTTPException(status_code=404, detail=\"subtravel not found\") return obj @travel_router.patch(\"/travel/update/{travel_id}\") def travel_update(travel_id: int, travel: TravelBase, session=Depends(get_session)) -> Travel: db_travel = session.get(Travel, travel_id) if not db_travel: raise HTTPException(status_code=404, detail=\"travel not found\") travel_data = travel.model_dump(exclude_unset=True) for key, value in travel_data.items(): setattr(db_travel, key, value) session.add(db_travel) session.commit() session.refresh(db_travel) return db_travel @travel_router.delete(\"/travel/delete/{travel_id}\") def travel_delete(travel_id: int, session=Depends(get_session)): travel = session.get(Travel, travel_id) if not travel: raise HTTPException(status_code=404, detail=\"travel not found\") session.delete(travel) session.commit() return {\"ok\": True} @travel_router.post(\"/travel-together-create\") def traveltogether_create(travel: TravelTogetherBase, session=Depends(get_session)) \\ -> TypedDict('Response', {\"status\": int, \"data\": TravelTogether}): travel = TravelTogether.model_validate(travel) session.add(travel) session.commit() session.refresh(travel) return {\"status\": 200, \"data\": travel} @travel_router.get(\"/list-traveltogethers\") def traveltogethers_list(session=Depends(get_session)) -> list[TravelTogether]: return session.query(TravelTogether).all() @travel_router.get(\"/traveltogether/{travel_id}\", response_model=TravelTogetherShow) def traveltogether_get(travel_id: int, session=Depends(get_session)): obj = session.get(TravelTogether, travel_id) if obj is None: raise HTTPException(status_code=404, detail=\"travel not found\") return obj @travel_router.patch(\"/traveltogether/update/{travel_id}\") def traveltogether_update(travel_id: int, travel: TravelTogetherBase, session=Depends(get_session)) -> TravelTogether: db_travel = session.get(TravelTogether, travel_id) if not db_travel: raise HTTPException(status_code=404, detail=\"travel not found\") travel_data = travel.model_dump(exclude_unset=True) for key, value in travel_data.items(): setattr(db_travel, key, value) session.add(db_travel) session.commit() session.refresh(db_travel) return db_travel @travel_router.delete(\"/traveltogether/delete/{travel_id}\") def traveltogether_delete(travel_id: int, session=Depends(get_session)): travel = session.get(TravelTogether, travel_id) if not travel: raise HTTPException(status_code=404, detail=\"travel not found\") session.delete(travel) session.commit() return {\"ok\": True} \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0439 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 swagger: Locations Travels Auth Users \u0412\u0438\u0437\u0443\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u0431\u0430\u0437\u044b \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 PGAdmin \u0422\u0430\u043a\u0436\u0435 \u043a\u043e\u043d\u0442\u0440\u043e\u043b\u0438\u0440\u0443\u0435\u043c \u0432\u0441\u0435 \u0438\u0437\u043c\u0435\u043d\u0435\u043d\u0438\u044f \u0432 \u0431\u0430\u0437\u0435 \u0434\u0430\u043d\u043d\u044b\u0445 \u043f\u0440\u0438 \u043f\u043e\u043c\u043e\u0449\u0438 \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 alembic","title":"\u0425\u043e\u0434 \u0420\u0430\u0431\u043e\u0442\u044b:"},{"location":"lab1/#_6","text":"\u0412 \u0445\u043e\u0434\u0435 \u0440\u0430\u0431\u043e\u0442\u044b \u0431\u044b\u043b\u043e \u043d\u0430\u043f\u0438\u0441\u0430\u043d\u043e API \u0441 \u0430\u0432\u0442\u043e\u0440\u0438\u0437\u0430\u0446\u0438\u0435\u0439 \u0438 CRUD-\u043e\u043f\u0435\u0440\u0430\u0446\u0438\u044f\u043c\u0438 \u043d\u0430 \u0444\u0440\u0435\u0439\u043c\u0432\u043e\u0440\u043a\u0435 FastAPI","title":"\u0412\u044b\u0432\u043e\u0434"},{"location":"lab2/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2. \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c. \u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b \u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python \u0417\u0430\u0434\u0430\u0447\u0430 : \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0417\u0430\u0434\u0430\u0447\u0430: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f \u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse*and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: ***\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435_** \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u0417\u0430\u0434\u0430\u0447\u0430 1 \u0421\u043b\u043e\u0436\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u0417\u0430\u0434\u0430\u0447\u0430 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 4 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0438 \u2013 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u0430 \u0432 4 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e 250.000 \u0447\u0438\u0441\u0435\u043b async: \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u0442\u0438 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u0445 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0432 gather. async def async_calculate_sum(): num_tasks = 4 n = 1000000 step = n // num_tasks tasks = [] for i in range(num_tasks): s = i * step + 1 e = (i + 1) * step if i != num_tasks - 1 else n tasks.append(asyncio.create_task(async_calculate_part(s, e))) results = await asyncio.gather(*tasks) total_sum = sum(results) return total_sum multiprocessing: \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430, \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447. def mp_calculate_sum(): num_tasks = 4 n = 1000000 tasks_list = [] step = n // num_tasks manager = multiprocessing.Manager() res = manager.list([0] * num_tasks) for i in range(num_tasks): s = i * step + 1 e = (i + 1) * step if i != num_tasks - 1 else n process = multiprocessing.Process(target=mp_calculate_part, args=(s, e, res, i)) tasks_list.append(process) process.start() for process in tasks_list: process.join() _sum = sum(res) return _sum threading: \u0440\u0430\u0441\u043a\u0438\u0434\u044b\u0432\u0430\u0435\u043c \u044d\u0442\u0438 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0442\u043e\u043a\u0438. def thread_calculate_sum(): num_tasks = 4 n = 1000000 tasks_list = [] result = [0] * num_tasks step = n // num_tasks for i in range(num_tasks): start = i * step + 1 end = (i + 1) * step if i != num_tasks - 1 else n thread = threading.Thread(target=thread_calculate_part, args=(start, end, result, i)) tasks_list.append(thread) thread.start() for thread in tasks_list: thread.join() total_sum = sum(result) return total_sum \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: \u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u0442\u0430\u043a\u0438\u0435: \u0412 async 0,04 - 0,05 \u0441\u0435\u043a\u0443\u043d\u0434. \u0412 multiprocessing - 0,6 - 0,7 \u0441\u0435\u043a\u0443\u043d\u0434. \u0412 threading \u2013 0,04 - 0,06 \u0441\u0435\u043a\u0443\u043d\u0434. \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0430\u0441\u0438\u043d\u043a \u0438 \u0442\u0440\u044d\u0434\u0438\u043d\u0433, \u0447\u0435\u043c \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433, \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0435 \u0435\u0441\u0442\u044c \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432. \u0417\u0430\u0434\u0430\u0447\u0430 2 \u0422\u0443\u0442 \u044f \u0432\u0437\u044f\u043b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u0430\u0439\u0442\u0430 \u0431\u0443\u043a\u0432\u043e\u0435\u0434, \u043f\u0430\u0440\u0441\u0438\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043d\u043e\u0441\u0438\u043b \u0438\u0445 \u0432 \u0431\u0434. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: async async def async_main(): await create_table() async with aiohttp.ClientSession() as session: tasks = [async_parse_and_save(session, url) for url in urls] await asyncio.gather(*tasks) multiprocessing def mlp_main(): processes = [] for url in urls: process = multiprocessing.Process(target=mlp_parse_and_save, args=(url,)) processes.append(process) process.start() for process in processes: process.join() threading \u2013 2-3 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. def thread_main(): threads = [] for url in urls: thread = threading.Thread(target=thread_parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join() \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b: \u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u0442\u0430\u043a\u0438\u0435: \u0412 async - 1-3 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. \u0412 multiprocessing - 4-5 \u0441\u0435\u043a\u0443\u043d\u0434. \u0412 threading \u2013 2-3 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0443 async, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0430 \u0441 \u044d\u0442\u0438\u043c \u043a\u0430\u043a \u0440\u0430\u0437 \u0442\u0430\u043a\u0438 \u043b\u0443\u0447\u0448\u0435 \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f async threading \u0432 \u0446\u0435\u043b\u043e\u043c \u0442\u043e\u0436\u0435 \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043d\u043e \u0438\u0437-\u0437\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430 python, \u043f\u043e\u0442\u043e\u043a\u0438 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043a\u043e\u0434 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0442\u0443\u0442 \u0432\u0440\u0435\u043c\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u041d\u0443 \u0438 \u0445\u0443\u0436\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b multiprocessing, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043a\u0430\u043a \u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u2013 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u0438\u043d\u043e\u0440\u043d\u044b\u0435, \u0430 \u0432\u043e\u0442 \u043d\u0430 \u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0445\u043e\u0434\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u0447\u0435\u043c \u0432 threading \u0438\u043b\u0438 async.","title":"lab2"},{"location":"lab2/#2","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2. \u041f\u043e\u0442\u043e\u043a\u0438. \u041f\u0440\u043e\u0446\u0435\u0441\u0441\u044b. \u0410\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c."},{"location":"lab2/#_1","text":"\u041f\u043e\u043d\u044f\u0442\u044c \u043e\u0442\u043b\u0438\u0447\u0438\u044f \u043f\u043e\u0442\u043e\u043a\u0430\u043c\u0438 \u0438 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0430\u043c\u0438 \u0438 \u043f\u043e\u043d\u044f\u0442\u044c, \u0447\u0442\u043e \u0442\u0430\u043a\u043e\u0435 \u0430\u0441\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u043e\u0441\u0442\u044c \u0432 Python.","title":"\u0426\u0435\u043b\u044c \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab2/#_2","text":"","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435"},{"location":"lab2/#1-threading-multiprocessing-async-python","text":"\u0417\u0430\u0434\u0430\u0447\u0430 : \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0435\u0448\u0430\u0442\u044c \u0441\u0447\u0438\u0442\u0430\u0442\u044c \u0441\u0443\u043c\u043c\u0443 \u0432\u0441\u0435\u0445 \u0447\u0438\u0441\u0435\u043b \u043e\u0442 1 \u0434\u043e 1000000. \u0420\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0445 \u0437\u0430\u0434\u0430\u0447 \u0434\u043b\u044f \u0443\u0441\u043a\u043e\u0440\u0435\u043d\u0438\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f. \u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0433\u043e \u043f\u043e\u0434\u0445\u043e\u0434\u0430: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e calculate_sum(), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0432\u044b\u0447\u0438\u0441\u043b\u0435\u043d\u0438\u044f. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c asyncio. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0440\u0430\u0437\u0431\u0438\u0442\u044c \u0437\u0430\u0434\u0430\u0447\u0443 \u043d\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u043e \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447 \u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u0442\u044c \u0438\u0445 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1. \u0420\u0430\u0437\u043b\u0438\u0447\u0438\u044f \u043c\u0435\u0436\u0434\u0443 threading, multiprocessing \u0438 async \u0432 Python"},{"location":"lab2/#2-","text":"\u0417\u0430\u0434\u0430\u0447\u0430: \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0443 \u043d\u0430 Python \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0434\u0430\u043d\u043d\u044b\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043d\u0438\u0435\u043c \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432 threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u0441 \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 \u0432\u0435\u0431-\u0441\u0430\u0439\u0442\u043e\u0432, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0438\u0445 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445.","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2. \u041f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0441 \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u0438\u0435\u043c \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445"},{"location":"lab2/#_3","text":"\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0442\u0440\u0438 \u0440\u0430\u0437\u043b\u0438\u0447\u043d\u044b\u0445 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u043d\u0430 Python, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u044e\u0449\u0438\u0435 \u043a\u0430\u0436\u0434\u044b\u0439 \u0438\u0437 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432: threading, multiprocessing \u0438 async. \u041a\u0430\u0436\u0434\u0430\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0430 \u0434\u043e\u043b\u0436\u043d\u0430 \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0442\u044c \u0444\u0443\u043d\u043a\u0446\u0438\u044e parse*and_save(url), \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0431\u0443\u0434\u0435\u0442 \u0437\u0430\u0433\u0440\u0443\u0436\u0430\u0442\u044c HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443 \u043f\u043e \u0443\u043a\u0430\u0437\u0430\u043d\u043d\u043e\u043c\u0443 URL, \u043f\u0430\u0440\u0441\u0438\u0442\u044c \u0435\u0435, \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c \u0437\u0430\u0433\u043e\u043b\u043e\u0432\u043e\u043a \u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0432\u043e\u0434\u0438\u0442\u044c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043d\u0430 \u044d\u043a\u0440\u0430\u043d. \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438\u0437 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u044b \u043d\u043e\u043c\u0435\u0440 1 \u0434\u043b\u044f \u0437\u0430\u043f\u043e\u043b\u0435\u043d\u043d\u0438\u044f \u0435\u0435 \u0434\u0430\u043d\u043d\u044b\u043c\u0438. \u0415\u0441\u043b\u0438 \u0412\u044b \u043d\u0435 \u043f\u043e\u043d\u0438\u043c\u0430\u0435\u0442\u0435, \u043a\u0430\u043a\u0438\u0435 \u0442\u0430\u0431\u043b\u0438\u0446\u044b \u0438 \u043e\u0442\u043a\u0443\u0434\u0430 \u0412\u044b \u043c\u043e\u0433\u043b\u0438 \u0431\u044b \u0437\u0430\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430, \u043d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u043f\u0440\u0435\u043f\u043e\u0434\u0430\u0432\u0430\u0442\u0435\u043b\u044e \u0432 \u043e\u0431\u0449\u0435\u043c \u0447\u0430\u0442\u0435 \u043f\u043e\u0442\u043e\u043a\u0430. \u0414\u043b\u044f threading \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0439\u0442\u0435 \u043c\u043e\u0434\u0443\u043b\u044c threading, \u0434\u043b\u044f multiprocessing - \u043c\u043e\u0434\u0443\u043b\u044c multiprocessing, \u0430 \u0434\u043b\u044f async - \u043a\u043b\u044e\u0447\u0435\u0432\u044b\u0435 \u0441\u043b\u043e\u0432\u0430 async/await \u0438 \u043c\u043e\u0434\u0443\u043b\u044c aiohttp \u0434\u043b\u044f \u0430\u0441\u0438\u043d\u0445\u0440\u043e\u043d\u043d\u044b\u0445 \u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432. \u0421\u043e\u0437\u0434\u0430\u0439\u0442\u0435 \u0441\u043f\u0438\u0441\u043e\u043a \u043d\u0435\u0441\u043a\u043e\u043b\u044c\u043a\u0438\u0445 URL-\u0430\u0434\u0440\u0435\u0441\u043e\u0432 \u0432\u0435\u0431-\u0441\u0442\u0440\u0430\u043d\u0438\u0446 \u0434\u043b\u044f \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430 \u0438 \u0440\u0430\u0437\u0434\u0435\u043b\u0438\u0442\u0435 \u0435\u0433\u043e \u043d\u0430 \u0440\u0430\u0432\u043d\u044b\u0435 \u0447\u0430\u0441\u0442\u0438 \u0434\u043b\u044f \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u043e\u0433\u043e \u043f\u0430\u0440\u0441\u0438\u043d\u0433\u0430. \u0417\u0430\u043f\u0443\u0441\u0442\u0438\u0442\u0435 \u043f\u0430\u0440\u0430\u043b\u043b\u0435\u043b\u044c\u043d\u044b\u0439 \u043f\u0430\u0440\u0441\u0438\u043d\u0433 \u0434\u043b\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u043e\u0445\u0440\u0430\u043d\u0438\u0442\u0435 \u0434\u0430\u043d\u043d\u044b\u0435 \u0432 \u0431\u0430\u0437\u0443 \u0434\u0430\u043d\u043d\u044b\u0445. \u0417\u0430\u043c\u0435\u0440\u044c\u0442\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b \u0438 \u0441\u0440\u0430\u0432\u043d\u0438\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b. \u0414\u043e\u043f\u043e\u043b\u043d\u0438\u0442\u0435\u043b\u044c\u043d\u044b\u0435 \u0442\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f: ***\u0421\u0434\u0435\u043b\u0430\u0439\u0442\u0435_** \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0443\u044e \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b, \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u043c\u044b\u0435 \u043f\u043e\u0434\u0445\u043e\u0434\u044b \u0438 \u0438\u0445 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0438. \u0412\u043a\u043b\u044e\u0447\u0438\u0442\u0435 \u0432 \u0434\u043e\u043a\u0443\u043c\u0435\u043d\u0442\u0430\u0446\u0438\u044e \u0442\u0430\u0431\u043b\u0438\u0446\u044b, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0438\u0435 \u0432\u0440\u0435\u043c\u044f \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043a\u0430\u0436\u0434\u043e\u0439 \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u044b. \u041f\u0440\u043e\u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0438\u0440\u0443\u0439\u0442\u0435 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0441\u0440\u0430\u0432\u043d\u0435\u043d\u0438\u044f \u0432\u0440\u0435\u043c\u0435\u043d\u0438 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u044f \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c \u043d\u0430 \u043e\u0441\u043d\u043e\u0432\u0435 \u0440\u0430\u0437\u043d\u044b\u0445 \u043f\u043e\u0434\u0445\u043e\u0434\u043e\u0432.","title":"\u041f\u043e\u0434\u0440\u043e\u0431\u043d\u043e\u0441\u0442\u0438 \u0437\u0430\u0434\u0430\u043d\u0438\u044f"},{"location":"lab2/#_4","text":"","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"},{"location":"lab2/#1","text":"\u0421\u043b\u043e\u0436\u0438\u0442\u044c \u0447\u0438\u0441\u043b\u0430 \u043e\u0442 1 \u0434\u043e \u043c\u0438\u043b\u043b\u0438\u043e\u043d\u0430 \u0417\u0430\u0434\u0430\u0447\u0430 \u0440\u0430\u0437\u0431\u0438\u0432\u0430\u0435\u0442\u0441\u044f \u043d\u0430 4 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0438 \u2013 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0447\u0438\u0441\u043b\u0430 \u0432 4 \u0438\u0442\u0435\u0440\u0430\u0446\u0438\u0438 \u043f\u043e 250.000 \u0447\u0438\u0441\u0435\u043b async: \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u044d\u0442\u0438 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0438, \u0434\u043e\u0431\u0430\u0432\u043b\u044f\u0435\u043c \u0438\u0445 \u0432 \u043c\u0430\u0441\u0441\u0438\u0432 \u0438 \u0441\u043a\u043b\u0430\u0434\u044b\u0432\u0430\u0435\u043c \u0432 gather. async def async_calculate_sum(): num_tasks = 4 n = 1000000 step = n // num_tasks tasks = [] for i in range(num_tasks): s = i * step + 1 e = (i + 1) * step if i != num_tasks - 1 else n tasks.append(asyncio.create_task(async_calculate_part(s, e))) results = await asyncio.gather(*tasks) total_sum = sum(results) return total_sum multiprocessing: \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u043c\u0435\u043d\u0435\u0434\u0436\u0435\u0440\u0430, \u0441\u043e\u0437\u0434\u0430\u0435\u043c \u0438 \u0437\u0430\u043f\u0443\u0441\u043a\u0430\u0435\u043c \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043b\u044f \u043d\u0430\u0448\u0438\u0445 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447. def mp_calculate_sum(): num_tasks = 4 n = 1000000 tasks_list = [] step = n // num_tasks manager = multiprocessing.Manager() res = manager.list([0] * num_tasks) for i in range(num_tasks): s = i * step + 1 e = (i + 1) * step if i != num_tasks - 1 else n process = multiprocessing.Process(target=mp_calculate_part, args=(s, e, res, i)) tasks_list.append(process) process.start() for process in tasks_list: process.join() _sum = sum(res) return _sum threading: \u0440\u0430\u0441\u043a\u0438\u0434\u044b\u0432\u0430\u0435\u043c \u044d\u0442\u0438 \u043f\u043e\u0434\u0437\u0430\u0434\u0430\u0447\u0438 \u043d\u0430 \u0440\u0430\u0437\u043d\u044b\u0435 \u043f\u043e\u0442\u043e\u043a\u0438. def thread_calculate_sum(): num_tasks = 4 n = 1000000 tasks_list = [] result = [0] * num_tasks step = n // num_tasks for i in range(num_tasks): start = i * step + 1 end = (i + 1) * step if i != num_tasks - 1 else n thread = threading.Thread(target=thread_calculate_part, args=(start, end, result, i)) tasks_list.append(thread) thread.start() for thread in tasks_list: thread.join() total_sum = sum(result) return total_sum","title":"\u0417\u0430\u0434\u0430\u0447\u0430 1"},{"location":"lab2/#_5","text":"\u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u0442\u0430\u043a\u0438\u0435: \u0412 async 0,04 - 0,05 \u0441\u0435\u043a\u0443\u043d\u0434. \u0412 multiprocessing - 0,6 - 0,7 \u0441\u0435\u043a\u0443\u043d\u0434. \u0412 threading \u2013 0,04 - 0,06 \u0441\u0435\u043a\u0443\u043d\u0434. \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b\u0438 \u0430\u0441\u0438\u043d\u043a \u0438 \u0442\u0440\u044d\u0434\u0438\u043d\u0433, \u0447\u0435\u043c \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433, \u0442\u0430\u043a \u043a\u0430\u043a \u0432 \u043c\u0443\u043b\u044c\u0442\u0438\u043f\u0440\u043e\u0446\u0435\u0441\u0441\u0438\u043d\u0433\u0435 \u0435\u0441\u0442\u044c \u0440\u0430\u0441\u0445\u043e\u0434\u044b \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u043e\u0432.","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:"},{"location":"lab2/#2_1","text":"\u0422\u0443\u0442 \u044f \u0432\u0437\u044f\u043b \u043a\u0430\u0442\u0435\u0433\u043e\u0440\u0438\u0438 \u0441\u0430\u0439\u0442\u0430 \u0431\u0443\u043a\u0432\u043e\u0435\u0434, \u043f\u0430\u0440\u0441\u0438\u043b \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0437\u0430\u043d\u043e\u0441\u0438\u043b \u0438\u0445 \u0432 \u0431\u0434. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b: async async def async_main(): await create_table() async with aiohttp.ClientSession() as session: tasks = [async_parse_and_save(session, url) for url in urls] await asyncio.gather(*tasks) multiprocessing def mlp_main(): processes = [] for url in urls: process = multiprocessing.Process(target=mlp_parse_and_save, args=(url,)) processes.append(process) process.start() for process in processes: process.join() threading \u2013 2-3 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. def thread_main(): threads = [] for url in urls: thread = threading.Thread(target=thread_parse_and_save, args=(url,)) threads.append(thread) thread.start() for thread in threads: thread.join()","title":"\u0417\u0430\u0434\u0430\u0447\u0430 2"},{"location":"lab2/#_6","text":"\u0412 \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u043f\u043e\u043b\u0443\u0447\u0438\u043b\u0438\u0441\u044c \u0442\u0430\u043a\u0438\u0435: \u0412 async - 1-3 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. \u0412 multiprocessing - 4-5 \u0441\u0435\u043a\u0443\u043d\u0434. \u0412 threading \u2013 2-3 \u0441\u0435\u043a\u0443\u043d\u0434\u044b. \u0412 \u044d\u0442\u043e\u0439 \u0437\u0430\u0434\u0430\u0447\u0435 \u043b\u0443\u0447\u0448\u0435 \u0432\u0441\u0435\u0433\u043e \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b \u0443 async, \u0442\u0430\u043a \u043a\u0430\u043a \u044d\u0442\u043e \u0437\u0430\u0434\u0430\u0447\u0430 \u0432\u0432\u043e\u0434\u0430-\u0432\u044b\u0432\u043e\u0434\u0430, \u0430 \u0441 \u044d\u0442\u0438\u043c \u043a\u0430\u043a \u0440\u0430\u0437 \u0442\u0430\u043a\u0438 \u043b\u0443\u0447\u0448\u0435 \u0441\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442\u0441\u044f async threading \u0432 \u0446\u0435\u043b\u043e\u043c \u0442\u043e\u0436\u0435 \u043d\u0435\u043f\u043b\u043e\u0445\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u044b\u0432\u0430\u0435\u0442, \u043d\u043e \u0438\u0437-\u0437\u0430 \u043e\u0441\u043e\u0431\u0435\u043d\u043d\u043e\u0441\u0442\u0435\u0439 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430 python, \u043f\u043e\u0442\u043e\u043a\u0438 \u043d\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u044f\u044e\u0442 \u043a\u043e\u0434 \u043e\u0434\u043d\u043e\u0432\u0440\u0435\u043c\u0435\u043d\u043d\u043e, \u0441\u043e\u043e\u0442\u0432\u0435\u0442\u0441\u0442\u0432\u0435\u043d\u043d\u043e \u0442\u0443\u0442 \u0432\u0440\u0435\u043c\u044f \u0441\u0440\u0435\u0434\u043d\u0435\u043c \u0431\u043e\u043b\u044c\u0448\u0435 \u041d\u0443 \u0438 \u0445\u0443\u0436\u0435 \u0432\u0441\u0435\u0433\u043e \u0441\u0435\u0431\u044f \u043f\u043e\u043a\u0430\u0437\u0430\u043b multiprocessing, \u043f\u043e\u0442\u043e\u043c\u0443 \u0447\u0442\u043e \u043a\u0430\u043a \u0438 \u0432 \u043f\u0435\u0440\u0432\u043e\u043c \u0437\u0430\u0434\u0430\u043d\u0438\u0438 \u2013 \u043f\u0440\u043e\u0446\u0435\u0441\u0441\u044b \u0434\u043e\u0432\u043e\u043b\u044c\u043d\u043e \u043c\u0438\u043d\u043e\u0440\u043d\u044b\u0435, \u0430 \u0432\u043e\u0442 \u043d\u0430 \u0438\u0445 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 \u0438 \u0443\u043f\u0440\u0430\u0432\u043b\u0435\u043d\u0438\u0435 \u0443\u0445\u043e\u0434\u0438\u0442 \u0431\u043e\u043b\u044c\u0448\u0435 \u0440\u0435\u0441\u0443\u0440\u0441\u043e\u0432, \u0447\u0435\u043c \u0432 threading \u0438\u043b\u0438 async.","title":"\u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u044b:"},{"location":"lab3/","text":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u041e\u0447\u0435\u0440\u0435\u0434\u0438 \u0426\u0435\u043b\u044c \u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c. \u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b \u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u043d\u043e \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b \u0434\u0432\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: travel_app - \u043f\u0435\u0440\u0432\u0430\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 docker_2 - \u043f\u043e \u0441\u0443\u0442\u0438 \u0432\u0442\u043e\u0440\u0430\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 Dockerfile \u0434\u043b\u044f travel_app: FROM python:3.9.19-alpine3.20 WORKDIR . COPY . . RUN pip3 install -r requirements.txt CMD uvicorn main:app --host localhost --port 8000 docker-compose.yaml: version: \"3.9\" services: lab_3_bd: container_name: lab_3_bd image: postgres restart: always environment: - POSTGRES_PASSWORD=1122 - POSTGRES_USER=postgres - POSTGRES_DB=web_data - POSTGRES_PORT=5432 volumes: - postgres_data:/var/lib/postgresql/data/ ports: - \"5432:5432\" networks: - backend travel_app: container_name: travel_app build: context: . env_file: .env depends_on: - lab_3_bd ports: - \"8000:8000\" command: uvicorn main:app --host 0.0.0.0 --port 8000 networks: - backend restart: always docker_2: container_name: docker_2 build: context: ./docker_2 env_file: .env depends_on: - lab_3_bd ports: - \"8001:8001\" command: uvicorn main:app --host 0.0.0.0 --port 8001 networks: - backend restart: always celery: build: context: . container_name: celery command: celery -A celery_app worker --loglevel=info restart: always depends_on: - redis - lab_3_bd networks: - backend redis: image: redis ports: - \"6379:6379\" networks: - backend volumes: postgres_data: networks: backend: driver: bridge \u0422\u0430\u043a\u0436\u0435 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b celery: celery_app.py: from celery import Celery celery_app = Celery( \"cel_app\", broker=\"redis://redis:6379/0\", backend=\"redis://redis:6379/0\", ) celery_app.conf.update( task_routes={ \"parse.parse_and_save\": \"main-queue\", }, ) if __name__ == \"__main__\": celery_app.start() \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: @celery_app.task def parse_and_save(url, session): response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title = soup.title.string if soup.title else 'No title' try_obj = Try(url=url, title=title) session.add(try_obj) session.commit() session.refresh(try_obj) \u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442 /parse : \u0417\u0430\u043f\u0440\u043e\u0441: \u0417\u0430\u043f\u0438\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0430, \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435, \u0447\u0442\u043e \u043c\u044b \u043f\u0430\u0440\u0441\u0438\u043b\u0438. \u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442 /get_parces : \u0417\u0430\u043f\u0440\u043e\u0441: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","title":"lab3"},{"location":"lab3/#3-fastapi-docker","text":"","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3: \u0423\u043f\u0430\u043a\u043e\u0432\u043a\u0430 FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f \u0432 Docker, \u0420\u0430\u0431\u043e\u0442\u0430 \u0441 \u0438\u0441\u0442\u043e\u0447\u043d\u0438\u043a\u0430\u043c\u0438 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u041e\u0447\u0435\u0440\u0435\u0434\u0438"},{"location":"lab3/#_1","text":"\u041d\u0430\u0443\u0447\u0438\u0442\u044c\u0441\u044f \u0443\u043f\u0430\u043a\u043e\u0432\u044b\u0432\u0430\u0442\u044c FastAPI \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u0435 \u0432 Docker, \u0438\u043d\u0442\u0435\u0433\u0440\u0438\u0440\u043e\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0434\u0430\u043d\u043d\u044b\u0445 \u0441 \u0431\u0430\u0437\u043e\u0439 \u0434\u0430\u043d\u043d\u044b\u0445 \u0438 \u0432\u044b\u0437\u044b\u0432\u0430\u0442\u044c \u043f\u0430\u0440\u0441\u0435\u0440 \u0447\u0435\u0440\u0435\u0437 API \u0438 \u043e\u0447\u0435\u0440\u0435\u0434\u044c.","title":"\u0426\u0435\u043b\u044c"},{"location":"lab3/#_2","text":"\u0412 \u0434\u0430\u043d\u043d\u043e\u0439 \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u043e\u0439 \u0440\u0430\u0431\u043e\u0442\u0435 \u0431\u044b\u043b\u043e \u0443\u043f\u0430\u043a\u043e\u0432\u0430\u043d\u043e \u0432 \u043a\u043e\u043d\u0442\u0435\u0439\u043d\u0435\u0440\u044b \u0434\u0432\u0430 \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f: travel_app - \u043f\u0435\u0440\u0432\u0430\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 docker_2 - \u043f\u043e \u0441\u0443\u0442\u0438 \u0432\u0442\u043e\u0440\u0430\u044f \u043b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 Dockerfile \u0434\u043b\u044f travel_app: FROM python:3.9.19-alpine3.20 WORKDIR . COPY . . RUN pip3 install -r requirements.txt CMD uvicorn main:app --host localhost --port 8000 docker-compose.yaml: version: \"3.9\" services: lab_3_bd: container_name: lab_3_bd image: postgres restart: always environment: - POSTGRES_PASSWORD=1122 - POSTGRES_USER=postgres - POSTGRES_DB=web_data - POSTGRES_PORT=5432 volumes: - postgres_data:/var/lib/postgresql/data/ ports: - \"5432:5432\" networks: - backend travel_app: container_name: travel_app build: context: . env_file: .env depends_on: - lab_3_bd ports: - \"8000:8000\" command: uvicorn main:app --host 0.0.0.0 --port 8000 networks: - backend restart: always docker_2: container_name: docker_2 build: context: ./docker_2 env_file: .env depends_on: - lab_3_bd ports: - \"8001:8001\" command: uvicorn main:app --host 0.0.0.0 --port 8001 networks: - backend restart: always celery: build: context: . container_name: celery command: celery -A celery_app worker --loglevel=info restart: always depends_on: - redis - lab_3_bd networks: - backend redis: image: redis ports: - \"6379:6379\" networks: - backend volumes: postgres_data: networks: backend: driver: bridge \u0422\u0430\u043a\u0436\u0435 \u044f \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u043b celery: celery_app.py: from celery import Celery celery_app = Celery( \"cel_app\", broker=\"redis://redis:6379/0\", backend=\"redis://redis:6379/0\", ) celery_app.conf.update( task_routes={ \"parse.parse_and_save\": \"main-queue\", }, ) if __name__ == \"__main__\": celery_app.start() \u0418\u0441\u043f\u043e\u043b\u044c\u0437\u0443\u0435\u0442\u0441\u044f \u043e\u043d \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u043c \u043e\u0431\u0440\u0430\u0437\u043e\u043c: @celery_app.task def parse_and_save(url, session): response = requests.get(url) soup = BeautifulSoup(response.content, 'html.parser') title = soup.title.string if soup.title else 'No title' try_obj = Try(url=url, title=title) session.add(try_obj) session.commit() session.refresh(try_obj) \u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442 /parse : \u0417\u0430\u043f\u0440\u043e\u0441: \u0417\u0430\u043f\u0438\u0441\u044c \u0441\u043e\u0437\u0434\u0430\u043d\u0430, \u0442\u0435\u043f\u0435\u0440\u044c \u043c\u043e\u0436\u0435\u043c \u043f\u043e\u0441\u043c\u043e\u0442\u0440\u0435\u0442\u044c \u0432\u0441\u0435, \u0447\u0442\u043e \u043c\u044b \u043f\u0430\u0440\u0441\u0438\u043b\u0438. \u042d\u043d\u0434\u043f\u043e\u0439\u043d\u0442 /get_parces : \u0417\u0430\u043f\u0440\u043e\u0441: \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442:","title":"\u0425\u043e\u0434 \u0440\u0430\u0431\u043e\u0442\u044b"}]}